## make a section for the new track called tracks.(unique name)
[ tracks.mipsannot ]
# settings for what data is shown in the track
storeClass     = JBrowse/Store/SeqFeature/NCList
style.color = deepskyblue
transcriptType = transcript
urlTemplate    = ../../raw/genomeref/tracks/MIPs v22 Annotation/{refseq}/trackData.json
category = Genome Reference Annotation
type = CanvasFeatures
key  = MIPS v22 Annotation

[ tracks.tgacannot ]
storeClass     = JBrowse/Store/SeqFeature/NCList
urlTemplate    = ../../raw/genomeref/tracks/TGAC Annotation/{refseq}/trackData.json
category = Genome Reference Annotation
style.color = deepskyblue
transcriptType = mRNA
subParts = exon
type = CanvasFeatures
key  = TGAC Annotation

[ tracks.tgac_mipsannot ]
storeClass     = JBrowse/Store/SeqFeature/NCList
urlTemplate    = ../../raw/genomeref/tracks/TGAC+MIPs Merged Annotation/{refseq}/trackData.json
category = Genome Reference Annotation
style.color = deepskyblue
type = CanvasFeatures
key  = TGAC+MIPs Merged Annotation

[ tracks.snpsgenomeHC ]
storeClass     = FastLoader/Store/SeqFeature/VCFLoader
type = CanvasVariants
urlTemplate    = ../../vcf_files/genomeref/high/{refseq}.vcf.gz
tbiUrlTemplate = ../../vcf_files/genomeref/high/{refseq}.vcf.gz.tbi
maxHeight = 1000
category = Mutants / 1 Unique
variantColorCoding = function( feature ) {
    /* console.log(feature); */
    var value = feature.get('CSQ');
    if(typeof value !== 'undefined') {
        var data = value.values;
        for(var i=0, len=data.length; i<len; i++) {
            counter = i+1;
            /* console.log(value[i]); */
            var dataSplit  = data[i].split("|");
            var gene_name = dataSplit[1];
            var eff_type = dataSplit[4];
            var aa_pos = dataSplit[7];
            var aa_change = dataSplit[8];
            var codondistance = dataSplit[9];
            if(eff_type === "stop_gained") {
                return '#FF0000';
            } else if (eff_type === "splice_donor_variant") {
                return '#FF0000';
            } else if (eff_type === "splice_acceptor_variant") {
                return '#FF0000';
            } else if (eff_type === "missense_variant") {
                return 'purple';
            } else if (eff_type === "synonymous_variant") {
                return '#00FF2F';
            }
        }
        return 'blue'
    } else {
        return 'blue'
    }
  }
style.text2Color = function( feature, variableName, glyphObject, track ) { return track.config.variantColorCoding(feature); }
fmtDetailField_alternative_alleles = function(fieldname) { return "Alternative alleles"; }
fmtDetailValue_CSQ = function(value) {
        newvalue = "";
        /* console.log(value); */
        if( value instanceof Array) {
            /* console.log(value[0]); */
            for(var i=0, len=value.length; i<len; i++) {
                counter = i+1;
                /* console.log(value[i]); */
                var dataSplit  = value[i].split("|");
                var gene_name = dataSplit[1];
                var eff_type = dataSplit[4];
                var aa_pos = dataSplit[7];
                var aa_change = dataSplit[8];
                var codondistance = dataSplit[9];
                /* console.log("String array: " + dataSplit); */
                newvalue += "<b>SnpEffect_" + counter + ":</b><br>Transcript = " + gene_name + "<br>Mutation Effect = " + eff_type;
                if(codondistance != "") {
                    newvalue += "<br>Codon change/distance = " + codondistance;
                }
                if(aa_change != "") {
                    if(aa_change.indexOf('/') === -1) {
                        aa_change = aa_change + aa_pos;
                    } else {
                        aa_change = aa_change.replace("/", aa_pos);
                    }
                    newvalue += "<br>Amino acid change = " + aa_change;
                }
                newvalue += "<br>";
            }
        }
        return newvalue;
    }
fmtDetailField_CSQ = function(fieldname) { return "VEP SNP Effect"; }
fmtDetailValue_seed_avail = function(value) {
        newvalue = "";
        if( value instanceof Array) {
            for(var i=0, len=value.length; i<len; i++) {
                counter = i+1;
                var sample_id = value[i];
                var fetchData = dojo.xhrGet({
                    url:"data/vcf_files/genomeref/seed_stock.json",
                    handleAs:"json",
                    sync:true,
                    load: function(data){
                        for(var j in data){
                            if(sample_id === data[j]["sample_id"]) {
                                newvalue = data[j]["avail"];
                                break;
                            }
                        }
                    }
                });
            }
        }
        return newvalue;
    }
fmtDetailField_seed_avail = function(fieldname) { return "Seed Stock Availability"; }
fmtDetailField_filter = function(fieldname) { return ""; }
fmtDetailValue_filter = function(value) { return ""; }
fmtDetailField_Score = function(fieldname) { return ""; }
fmtDetailValue_Score = function(value) { return ""; }
getSampleName = function( feature ) {
    /* console.log(feature); */
    var value = feature.get('seed_avail');
    if(typeof value !== 'undefined') {
        var data = value.values;
        for(var i=0, len=data.length; i<len; i++) {
            counter = i+1;
            /* console.log(value[i]); */
            var sample_id = dataSplit[i];
        }
        return sample_id
    } else {
        return ''
    }
  }
menuTemplate+=json:{"label": "View details"}
menuTemplate+=json:{"label": "Download ALL Sample Data for {seed_avail}", "iconClass" : "dijitIconDatabase","action": "newWindow","url" : "http://dubcovskylab.ucdavis.edu/blast/getTillingData.php?library={seed_avail}"}
menuTemplate+=json:{"label": "Download {seed_avail} Data on Contig {seq_id}", "iconClass" : "dijitIconDatabase","action": "newWindow","url" : "http://dubcovskylab.ucdavis.edu/blast/getTillingData.php?library={seed_avail}&contig={seq_id}"}
menuTemplate+=json:{"label": "Download ALL Data on Contig {seq_id}", "iconClass" : "dijitIconDatabase","action": "newWindow","url" : "http://dubcovskylab.ucdavis.edu/blast/getTillingData.php?contig={seq_id}"}
menuTemplate+=json:{"label": "Seed Order Form", "iconClass" : "dijitIconPackage","action": "newWindow","url" : "http://dubcovskylab.ucdavis.edu/wheat-tilling/order"}
key  = High-Confidence Mutants (99.5%)

[ tracks.snpsgenomeMC ]
storeClass     = FastLoader/Store/SeqFeature/VCFLoader
type = CanvasVariants
urlTemplate    = ../../vcf_files/genomeref/intermediate/{refseq}.vcf.gz
tbiUrlTemplate = ../../vcf_files/genomeref/intermediate/{refseq}.vcf.gz.tbi
maxHeight = 1000
category = Mutants / 1 Unique
variantColorCoding = function( feature ) {
    /*console.log(feature); */
    var value = feature.get('CSQ');
    if(typeof value !== 'undefined') {
        var data = value.values;
        for(var i=0, len=data.length; i<len; i++) {
            counter = i+1;
            /* console.log(value[i]); */
            var dataSplit  = data[i].split("|");
            var gene_name = dataSplit[1];
            var eff_type = dataSplit[4];
            var aa_pos = dataSplit[7];
            var aa_change = dataSplit[8];
            var codondistance = dataSplit[9];
            if(eff_type === "stop_gained") {
                return '#FF0000';
            } else if (eff_type === "splice_donor_variant") {
                return '#FF0000';
            } else if (eff_type === "splice_acceptor_variant") {
                return '#FF0000';
            } else if (eff_type === "missense_variant") {
                return 'purple';
            } else if (eff_type === "synonymous_variant") {
                return '#00FF2F';
            }
        }
        return 'blue';
    } else {
        return 'blue';
    }
  }
style.text2Color = function( feature, variableName, glyphObject, track ) { return track.config.variantColorCoding(feature); }
fmtDetailField_alternative_alleles = function(fieldname) { return "Alternative alleles"; }
fmtDetailValue_CSQ = function(value) {
        newvalue = "";
        /* console.log(value); */
        if( value instanceof Array) {
            /* console.log(value[0]); */
            for(var i=0, len=value.length; i<len; i++) {
                counter = i+1;
                /* console.log(value[i]); */
                var dataSplit  = value[i].split("|");
                var gene_name = dataSplit[1];
                var eff_type = dataSplit[4];
                var aa_pos = dataSplit[7];
                var aa_change = dataSplit[8];
                var codondistance = dataSplit[9];
                /* console.log("String array: " + dataSplit); */
                newvalue += "<b>SnpEffect_" + counter + ":</b><br>Transcript = " + gene_name + "<br>Mutation Effect = " + eff_type;
                if(codondistance != "") {
                    newvalue += "<br>Codon change/distance = " + codondistance;
                }
                if(aa_change != "") {
                    if(aa_change.indexOf('/') === -1) {
                        aa_change = aa_change + aa_pos;
                    } else {
                        aa_change = aa_change.replace("/", aa_pos);
                    }
                    newvalue += "<br>Amino acid change = " + aa_change;
                }
                newvalue += "<br>";
            }
        }
        return newvalue;
    }
fmtDetailField_CSQ = function(fieldname) { return "VEP SNP Effect"; }
fmtDetailValue_seed_avail = function(value) {
        newvalue = "";
        if( value instanceof Array) {
            for(var i=0, len=value.length; i<len; i++) {
                counter = i+1;
                var sample_id = value[i];
                var fetchData = dojo.xhrGet({
                    url:"data/vcf_files/genomeref/seed_stock.json",
                    handleAs:"json",
                    sync:true,
                    load: function(data){
                        for(var j in data){
                            if(sample_id === data[j]["sample_id"]) {
                                newvalue = data[j]["avail"];
                                break;
                            }
                        }
                    }
                });
            }
        }
        return newvalue;
    }
fmtDetailField_seed_avail = function(fieldname) { return "Seed Stock Availability"; }
fmtDetailField_filter = function(fieldname) { return ""; }
fmtDetailValue_filter = function(value) { return ""; }
fmtDetailField_Score = function(fieldname) { return ""; }
fmtDetailValue_Score = function(value) { return ""; }
menuTemplate+=json:{"label": "View details"}
menuTemplate+=json:{"label": "Download ALL Sample Data for {seed_avail}", "iconClass" : "dijitIconDatabase","action": "newWindow","url" : "http://dubcovskylab.ucdavis.edu/blast/getTillingData.php?library={seed_avail}"}
menuTemplate+=json:{"label": "Download {seed_avail} Data on Contig {seq_id}", "iconClass" : "dijitIconDatabase","action": "newWindow","url" : "http://dubcovskylab.ucdavis.edu/blast/getTillingData.php?library={seed_avail}&contig={seq_id}"}
menuTemplate+=json:{"label": "Download ALL Data on Contig {seq_id}", "iconClass" : "dijitIconDatabase","action": "newWindow","url" : "http://dubcovskylab.ucdavis.edu/blast/getTillingData.php?contig={seq_id}"}
menuTemplate+=json:{"label": "Seed Order Form", "iconClass" : "dijitIconPackage","action": "newWindow","url" : "http://dubcovskylab.ucdavis.edu/wheat-tilling/order"}
key  = Intermediate-Confidence Mutants (98.9%)

[ tracks.snpsgenomeLC ]
storeClass     = FastLoader/Store/SeqFeature/VCFLoader
type = CanvasVariants
urlTemplate    = ../../vcf_files/genomeref/low/{refseq}.vcf.gz
tbiUrlTemplate = ../../vcf_files/genomeref/low/{refseq}.vcf.gz.tbi
category = Mutants / 1 Unique
maxHeight = 1000
type = JBrowse/View/Track/CanvasVariants
variantColorCoding = function( feature ) {
    /*console.log(feature); */
    var value = feature.get('CSQ');
    if(typeof value !== 'undefined') {
        var data = value.values;
        for(var i=0, len=data.length; i<len; i++) {
            counter = i+1;
            /* console.log(value[i]); */
            var dataSplit  = data[i].split("|");
            var gene_name = dataSplit[1];
            var eff_type = dataSplit[4];
            var aa_pos = dataSplit[7];
            var aa_change = dataSplit[8];
            var codondistance = dataSplit[9];
            if(eff_type === "stop_gained") {
                return '#FF0000';
            } else if (eff_type === "splice_donor_variant") {
                return '#FF0000';
            } else if (eff_type === "splice_acceptor_variant") {
                return '#FF0000';
            } else if (eff_type === "missense_variant") {
                return 'purple';
            } else if (eff_type === "synonymous_variant") {
                return '#00FF2F';
            }
        }
        return 'blue';
    } else {
        return 'blue';
    }
  }
style.text2Color = function( feature, variableName, glyphObject, track ) { return track.config.variantColorCoding(feature); }
fmtDetailField_alternative_alleles = function(fieldname) { return "Alternative alleles"; }
fmtDetailValue_CSQ = function(value) {
        newvalue = "";
        /* console.log(value); */
        if( value instanceof Array) {
            /* console.log(value[0]); */
            for(var i=0, len=value.length; i<len; i++) {
                counter = i+1;
                /* console.log(value[i]); */
                var dataSplit  = value[i].split("|");
                var gene_name = dataSplit[1];
                var eff_type = dataSplit[4];
                var aa_pos = dataSplit[7];
                var aa_change = dataSplit[8];
                var codondistance = dataSplit[9];
                /* console.log("String array: " + dataSplit); */
                newvalue += "<b>SnpEffect_" + counter + ":</b><br>Transcript = " + gene_name + "<br>Mutation Effect = " + eff_type;
                if(codondistance != "") {
                    newvalue += "<br>Codon change/distance = " + codondistance;
                }
                if(aa_change != "") {
                    if(aa_change.indexOf('/') === -1) {
                        aa_change = aa_change + aa_pos;
                    } else {
                        aa_change = aa_change.replace("/", aa_pos);
                    }
                    newvalue += "<br>Amino acid change = " + aa_change;
                }
                newvalue += "<br>";
            }
        }
        return newvalue;
    }
fmtDetailField_CSQ = function(fieldname) { return "VEP SNP Effect"; }
fmtDetailValue_seed_avail = function(value) {
        newvalue = "";
        if( value instanceof Array) {
            for(var i=0, len=value.length; i<len; i++) {
                counter = i+1;
                var sample_id = value[i];
                var fetchData = dojo.xhrGet({
                    url:"data/vcf_files/genomeref/seed_stock.json",
                    handleAs:"json",
                    sync:true,
                    load: function(data){
                        for(var j in data){
                            if(sample_id === data[j]["sample_id"]) {
                                newvalue = data[j]["avail"];
                                break;
                            }
                        }
                    }
                });
            }
        }
        return newvalue;
    }
fmtDetailField_seed_avail = function(fieldname) { return "Seed Stock Availability"; }
fmtDetailField_filter = function(fieldname) { return ""; }
fmtDetailValue_filter = function(value) { return ""; }
fmtDetailField_Score = function(fieldname) { return ""; }
fmtDetailValue_Score = function(value) { return ""; }
menuTemplate+=json:{"label": "View details"}
menuTemplate+=json:{"label": "Download ALL Sample Data for {seed_avail}", "iconClass" : "dijitIconDatabase","action": "newWindow","url" : "http://dubcovskylab.ucdavis.edu/blast/getTillingData.php?library={seed_avail}"}
menuTemplate+=json:{"label": "Download {seed_avail} Data on Contig {seq_id}", "iconClass" : "dijitIconDatabase","action": "newWindow","url" : "http://dubcovskylab.ucdavis.edu/blast/getTillingData.php?library={seed_avail}&contig={seq_id}"}
menuTemplate+=json:{"label": "Download ALL Data on Contig {seq_id}", "iconClass" : "dijitIconDatabase","action": "newWindow","url" : "http://dubcovskylab.ucdavis.edu/blast/getTillingData.php?contig={seq_id}"}
menuTemplate+=json:{"label": "Seed Order Form", "iconClass" : "dijitIconPackage","action": "newWindow","url" : "http://dubcovskylab.ucdavis.edu/wheat-tilling/order"}
key  = Lower-Confidence Mutants (97.6%)

[ tracks.snpsgenomeRisky ]
storeClass     = FastLoader/Store/SeqFeature/VCFLoader
type = CanvasVariants
urlTemplate    = ../../vcf_files/genomeref/risky/{refseq}.vcf.gz
tbiUrlTemplate = ../../vcf_files/genomeref/risky/{refseq}.vcf.gz.tbi
category = Mutants / 3 Risky
maxHeight = 1000
variantColorCoding = function( feature ) {
    /*console.log(feature); */
    var value = feature.get('CSQ');
    if(typeof value !== 'undefined') {
        var data = value.values;
        for(var i=0, len=data.length; i<len; i++) {
            counter = i+1;
            /* console.log(value[i]); */
            var dataSplit  = data[i].split("|");
            var gene_name = dataSplit[1];
            var eff_type = dataSplit[4];
            var aa_pos = dataSplit[7];
            var aa_change = dataSplit[8];
            var codondistance = dataSplit[9];
            if(eff_type === "stop_gained") {
                return '#FF0000';
            } else if (eff_type === "splice_donor_variant") {
                return '#FF0000';
            } else if (eff_type === "splice_acceptor_variant") {
                return '#FF0000';
            } else if (eff_type === "missense_variant") {
                return 'purple';
            } else if (eff_type === "synonymous_variant") {
                return '#00FF2F';
            }
        }
        return 'blue';
    } else {
        return 'blue';
    }
  }
style.text2Color = function( feature, variableName, glyphObject, track ) { return track.config.variantColorCoding(feature); }
fmtDetailField_alternative_alleles = function(fieldname) { return "Alternative alleles"; }
fmtDetailValue_CSQ = function(value) {
        newvalue = "";
        /* console.log(value); */
        if( value instanceof Array) {
            /* console.log(value[0]); */
            for(var i=0, len=value.length; i<len; i++) {
                counter = i+1;
                /* console.log(value[i]); */
                var dataSplit  = value[i].split("|");
                var gene_name = dataSplit[1];
                var eff_type = dataSplit[4];
                var aa_pos = dataSplit[7];
                var aa_change = dataSplit[8];
                var codondistance = dataSplit[9];
                /* console.log("String array: " + dataSplit); */
                newvalue += "<b>SnpEffect_" + counter + ":</b><br>Transcript = " + gene_name + "<br>Mutation Effect = " + eff_type;
                if(codondistance != "") {
                    newvalue += "<br>Codon change/distance = " + codondistance;
                }
                if(aa_change != "") {
                    if(aa_change.indexOf('/') === -1) {
                        aa_change = aa_change + aa_pos;
                    } else {
                        aa_change = aa_change.replace("/", aa_pos);
                    }
                    newvalue += "<br>Amino acid change = " + aa_change;
                }
                newvalue += "<br>";
            }
        }
        return newvalue;
    }
fmtDetailField_CSQ = function(fieldname) { return "VEP SNP Effect"; }
fmtDetailValue_seed_avail = function(value) {
        newvalue = "";
        if( value instanceof Array) {
            for(var i=0, len=value.length; i<len; i++) {
                counter = i+1;
                var sample_id = value[i];
                var fetchData = dojo.xhrGet({
                    url:"data/vcf_files/genomeref/seed_stock.json",
                    handleAs:"json",
                    sync:true,
                    load: function(data){
                        for(var j in data){
                            if(sample_id === data[j]["sample_id"]) {
                                newvalue = data[j]["avail"];
                                break;
                            }
                        }
                    }
                });
            }
        }
        return newvalue;
    }
fmtDetailField_seed_avail = function(fieldname) { return "Seed Stock Availability"; }
fmtDetailField_filter = function(fieldname) { return ""; }
fmtDetailValue_filter = function(value) { return ""; }
fmtDetailField_Score = function(fieldname) { return ""; }
fmtDetailValue_Score = function(value) { return ""; }
menuTemplate+=json:{"label": "View details"}
menuTemplate+=json:{"label": "Download ALL Sample Data for {seed_avail}", "iconClass" : "dijitIconDatabase","action": "newWindow","url" : "http://dubcovskylab.ucdavis.edu/blast/getTillingData.php?library={seed_avail}"}
menuTemplate+=json:{"label": "Download {seed_avail} Data on Contig {seq_id}", "iconClass" : "dijitIconDatabase","action": "newWindow","url" : "http://dubcovskylab.ucdavis.edu/blast/getTillingData.php?library={seed_avail}&contig={seq_id}"}
menuTemplate+=json:{"label": "Download ALL Data on Contig {seq_id}", "iconClass" : "dijitIconDatabase","action": "newWindow","url" : "http://dubcovskylab.ucdavis.edu/blast/getTillingData.php?contig={seq_id}"}
menuTemplate+=json:{"label": "Seed Order Form", "iconClass" : "dijitIconPackage","action": "newWindow","url" : "http://dubcovskylab.ucdavis.edu/wheat-tilling/order"}
key  = Risky-Confidence Mutants (89.5%)

[ tracks.snpsmultiHC ]
storeClass     = FastLoader/Store/SeqFeature/VCFLoader
type = CanvasVariants
urlTemplate    = ../../vcf_files/genomeref/mm_high/{refseq}.vcf.gz
tbiUrlTemplate = ../../vcf_files/genomeref/mm_high/{refseq}.vcf.gz.tbi
category = Mutants / 2 MultiMap
maxHeight = 1000
variantColorCoding = function( feature ) {
    /*console.log(feature); */
    var value = feature.get('CSQ');
    if(typeof value !== 'undefined') {
        var data = value.values;
        for(var i=0, len=data.length; i<len; i++) {
            counter = i+1;
            /* console.log(value[i]); */
            var dataSplit  = data[i].split("|");
            var gene_name = dataSplit[1];
            var eff_type = dataSplit[4];
            var aa_pos = dataSplit[7];
            var aa_change = dataSplit[8];
            var codondistance = dataSplit[9];
            if(eff_type === "stop_gained") {
                return '#FF0000';
            } else if (eff_type === "splice_donor_variant") {
                return '#FF0000';
            } else if (eff_type === "splice_acceptor_variant") {
                return '#FF0000';
            } else if (eff_type === "missense_variant") {
                return 'purple';
            } else if (eff_type === "synonymous_variant") {
                return '#00FF2F';
            }
        }
        return 'blue';
    } else {
        return 'blue';
    }
  }
style.text2Color = function( feature, variableName, glyphObject, track ) { return track.config.variantColorCoding(feature); }
fmtDetailField_alternative_alleles = function(fieldname) { return "Alternative alleles"; }
fmtDetailValue_CSQ = function(value) {
        newvalue = "";
        /* console.log(value); */
        if( value instanceof Array) {
            /* console.log(value[0]); */
            for(var i=0, len=value.length; i<len; i++) {
                counter = i+1;
                /* console.log(value[i]); */
                var dataSplit  = value[i].split("|");
                var gene_name = dataSplit[1];
                var eff_type = dataSplit[4];
                var aa_pos = dataSplit[7];
                var aa_change = dataSplit[8];
                var codondistance = dataSplit[9];
                /* console.log("String array: " + dataSplit); */
                newvalue += "<b>SnpEffect_" + counter + ":</b><br>Transcript = " + gene_name + "<br>Mutation Effect = " + eff_type;
                if(codondistance != "") {
                    newvalue += "<br>Codon change/distance = " + codondistance;
                }
                if(aa_change != "") {
                    if(aa_change.indexOf('/') === -1) {
                        aa_change = aa_change + aa_pos;
                    } else {
                        aa_change = aa_change.replace("/", aa_pos);
                    }
                    newvalue += "<br>Amino acid change = " + aa_change;
                }
                newvalue += "<br>";
            }
        }
        return newvalue;
    }
fmtDetailField_CSQ = function(fieldname) { return "VEP SNP Effect"; }
fmtDetailValue_seed_avail = function(value) {
        newvalue = "";
        if( value instanceof Array) {
            for(var i=0, len=value.length; i<len; i++) {
                counter = i+1;
                var sample_id = value[i];
                var fetchData = dojo.xhrGet({
                    url:"data/vcf_files/genomeref/seed_stock.json",
                    handleAs:"json",
                    sync:true,
                    load: function(data){
                        for(var j in data){
                            if(sample_id === data[j]["sample_id"]) {
                                newvalue = data[j]["avail"];
                                break;
                            }
                        }
                    }
                });
            }
        }
        return newvalue;
    }
fmtDetailField_seed_avail = function(fieldname) { return "Seed Stock Availability"; }
fmtDetailField_filter = function(fieldname) { return ""; }
fmtDetailValue_filter = function(value) { return ""; }
fmtDetailField_Score = function(fieldname) { return ""; }
fmtDetailValue_Score = function(value) { return ""; }
menuTemplate+=json:{"label": "View details"}
menuTemplate+=json:{"label": "Download ALL Sample Data for {seed_avail}", "iconClass" : "dijitIconDatabase","action": "newWindow","url" : "http://dubcovskylab.ucdavis.edu/blast/getTillingData.php?library={seed_avail}"}
menuTemplate+=json:{"label": "Download {seed_avail} Data on Contig {seq_id}", "iconClass" : "dijitIconDatabase","action": "newWindow","url" : "http://dubcovskylab.ucdavis.edu/blast/getTillingData.php?library={seed_avail}&contig={seq_id}"}
menuTemplate+=json:{"label": "Download ALL Data on Contig {seq_id}", "iconClass" : "dijitIconDatabase","action": "newWindow","url" : "http://dubcovskylab.ucdavis.edu/blast/getTillingData.php?contig={seq_id}"}
menuTemplate+=json:{"label": "Seed Order Form", "iconClass" : "dijitIconPackage","action": "newWindow","url" : "http://dubcovskylab.ucdavis.edu/wheat-tilling/order"}
key  = High-Confidence MultiMap Mutants


[ tracks.snpsmultiMC ]
storeClass     = FastLoader/Store/SeqFeature/VCFLoader
type = CanvasVariants
urlTemplate    = ../../vcf_files/genomeref/mm_intermediate/{refseq}.vcf.gz
tbiUrlTemplate = ../../vcf_files/genomeref/mm_intermediate/{refseq}.vcf.gz.tbi
category = Mutants / 2 MultiMap
maxHeight = 1000
variantColorCoding = function( feature ) {
    /*console.log(feature); */
    var value = feature.get('CSQ');
    if(typeof value !== 'undefined') {
        var data = value.values;
        for(var i=0, len=data.length; i<len; i++) {
            counter = i+1;
            /* console.log(value[i]); */
            var dataSplit  = data[i].split("|");
            var gene_name = dataSplit[1];
            var eff_type = dataSplit[4];
            var aa_pos = dataSplit[7];
            var aa_change = dataSplit[8];
            var codondistance = dataSplit[9];
            if(eff_type === "stop_gained") {
                return '#FF0000';
            } else if (eff_type === "splice_donor_variant") {
                return '#FF0000';
            } else if (eff_type === "splice_acceptor_variant") {
                return '#FF0000';
            } else if (eff_type === "missense_variant") {
                return 'purple';
            } else if (eff_type === "synonymous_variant") {
                return '#00FF2F';
            }
        }
        return 'blue';
    } else {
        return 'blue';
    }
  }
style.text2Color = function( feature, variableName, glyphObject, track ) { return track.config.variantColorCoding(feature); }
fmtDetailField_alternative_alleles = function(fieldname) { return "Alternative alleles"; }
fmtDetailValue_CSQ = function(value) {
        newvalue = "";
        /* console.log(value); */
        if( value instanceof Array) {
            /* console.log(value[0]); */
            for(var i=0, len=value.length; i<len; i++) {
                counter = i+1;
                /* console.log(value[i]); */
                var dataSplit  = value[i].split("|");
                var gene_name = dataSplit[1];
                var eff_type = dataSplit[4];
                var aa_pos = dataSplit[7];
                var aa_change = dataSplit[8];
                var codondistance = dataSplit[9];
                /* console.log("String array: " + dataSplit); */
                newvalue += "<b>SnpEffect_" + counter + ":</b><br>Transcript = " + gene_name + "<br>Mutation Effect = " + eff_type;
                if(codondistance != "") {
                    newvalue += "<br>Codon change/distance = " + codondistance;
                }
                if(aa_change != "") {
                    if(aa_change.indexOf('/') === -1) {
                        aa_change = aa_change + aa_pos;
                    } else {
                        aa_change = aa_change.replace("/", aa_pos);
                    }
                    newvalue += "<br>Amino acid change = " + aa_change;
                }
                newvalue += "<br>";
            }
        }
        return newvalue;
    }
fmtDetailField_CSQ = function(fieldname) { return "VEP SNP Effect"; }
fmtDetailValue_seed_avail = function(value) {
        newvalue = "";
        if( value instanceof Array) {
            for(var i=0, len=value.length; i<len; i++) {
                counter = i+1;
                var sample_id = value[i];
                var fetchData = dojo.xhrGet({
                    url:"data/vcf_files/genomeref/seed_stock.json",
                    handleAs:"json",
                    sync:true,
                    load: function(data){
                        for(var j in data){
                            if(sample_id === data[j]["sample_id"]) {
                                newvalue = data[j]["avail"];
                                break;
                            }
                        }
                    }
                });
            }
        }
        return newvalue;
    }
fmtDetailField_seed_avail = function(fieldname) { return "Seed Stock Availability"; }
fmtDetailField_filter = function(fieldname) { return ""; }
fmtDetailValue_filter = function(value) { return ""; }
fmtDetailField_Score = function(fieldname) { return ""; }
fmtDetailValue_Score = function(value) { return ""; }
menuTemplate+=json:{"label": "View details"}
menuTemplate+=json:{"label": "Download ALL Sample Data for {seed_avail}", "iconClass" : "dijitIconDatabase","action": "newWindow","url" : "http://dubcovskylab.ucdavis.edu/blast/getTillingData.php?library={seed_avail}"}
menuTemplate+=json:{"label": "Download {seed_avail} Data on Contig {seq_id}", "iconClass" : "dijitIconDatabase","action": "newWindow","url" : "http://dubcovskylab.ucdavis.edu/blast/getTillingData.php?library={seed_avail}&contig={seq_id}"}
menuTemplate+=json:{"label": "Download ALL Data on Contig {seq_id}", "iconClass" : "dijitIconDatabase","action": "newWindow","url" : "http://dubcovskylab.ucdavis.edu/blast/getTillingData.php?contig={seq_id}"}
menuTemplate+=json:{"label": "Seed Order Form", "iconClass" : "dijitIconPackage","action": "newWindow","url" : "http://dubcovskylab.ucdavis.edu/wheat-tilling/order"}
key  = Intermediate-Confidence MultiMap Mutants


[ tracks.snpsmultiLC ]
storeClass     = FastLoader/Store/SeqFeature/VCFLoader
type = CanvasVariants
urlTemplate    = ../../vcf_files/genomeref/mm_low/{refseq}.vcf.gz
tbiUrlTemplate = ../../vcf_files/genomeref/mm_low/{refseq}.vcf.gz.tbi
category = Mutants / 2 MultiMap
maxHeight = 1000
variantColorCoding = function( feature ) {
    /*console.log(feature); */
    var value = feature.get('CSQ');
    if(typeof value !== 'undefined') {
        var data = value.values;
        for(var i=0, len=data.length; i<len; i++) {
            counter = i+1;
            /* console.log(value[i]); */
            var dataSplit  = data[i].split("|");
            var gene_name = dataSplit[1];
            var eff_type = dataSplit[4];
            var aa_pos = dataSplit[7];
            var aa_change = dataSplit[8];
            var codondistance = dataSplit[9];
            if(eff_type === "stop_gained") {
                return '#FF0000';
            } else if (eff_type === "splice_donor_variant") {
                return '#FF0000';
            } else if (eff_type === "splice_acceptor_variant") {
                return '#FF0000';
            } else if (eff_type === "missense_variant") {
                return 'purple';
            } else if (eff_type === "synonymous_variant") {
                return '#00FF2F';
            }
        }
        return 'blue';
    } else {
        return 'blue';
    }
  }
style.text2Color = function( feature, variableName, glyphObject, track ) { return track.config.variantColorCoding(feature); }
fmtDetailField_alternative_alleles = function(fieldname) { return "Alternative alleles"; }
fmtDetailValue_CSQ = function(value) {
        newvalue = "";
        /* console.log(value); */
        if( value instanceof Array) {
            /* console.log(value[0]); */
            for(var i=0, len=value.length; i<len; i++) {
                counter = i+1;
                /* console.log(value[i]); */
                var dataSplit  = value[i].split("|");
                var gene_name = dataSplit[1];
                var eff_type = dataSplit[4];
                var aa_pos = dataSplit[7];
                var aa_change = dataSplit[8];
                var codondistance = dataSplit[9];
                /* console.log("String array: " + dataSplit); */
                newvalue += "<b>SnpEffect_" + counter + ":</b><br>Transcript = " + gene_name + "<br>Mutation Effect = " + eff_type;
                if(codondistance != "") {
                    newvalue += "<br>Codon change/distance = " + codondistance;
                }
                if(aa_change != "") {
                    if(aa_change.indexOf('/') === -1) {
                        aa_change = aa_change + aa_pos;
                    } else {
                        aa_change = aa_change.replace("/", aa_pos);
                    }
                    newvalue += "<br>Amino acid change = " + aa_change;
                }
                newvalue += "<br>";
            }
        }
        return newvalue;
    }
fmtDetailField_CSQ = function(fieldname) { return "VEP SNP Effect"; }
fmtDetailValue_seed_avail = function(value) {
        newvalue = "";
        if( value instanceof Array) {
            for(var i=0, len=value.length; i<len; i++) {
                counter = i+1;
                var sample_id = value[i];
                var fetchData = dojo.xhrGet({
                    url:"data/vcf_files/genomeref/seed_stock.json",
                    handleAs:"json",
                    sync:true,
                    load: function(data){
                        for(var j in data){
                            if(sample_id === data[j]["sample_id"]) {
                                newvalue = data[j]["avail"];
                                break;
                            }
                        }
                    }
                });
            }
        }
        return newvalue;
    }
fmtDetailField_seed_avail = function(fieldname) { return "Seed Stock Availability"; }
fmtDetailField_filter = function(fieldname) { return ""; }
fmtDetailValue_filter = function(value) { return ""; }
fmtDetailField_Score = function(fieldname) { return ""; }
fmtDetailValue_Score = function(value) { return ""; }
menuTemplate+=json:{"label": "View details"}
menuTemplate+=json:{"label": "Download ALL Sample Data for {seed_avail}", "iconClass" : "dijitIconDatabase","action": "newWindow","url" : "http://dubcovskylab.ucdavis.edu/blast/getTillingData.php?library={seed_avail}"}
menuTemplate+=json:{"label": "Download {seed_avail} Data on Contig {seq_id}", "iconClass" : "dijitIconDatabase","action": "newWindow","url" : "http://dubcovskylab.ucdavis.edu/blast/getTillingData.php?library={seed_avail}&contig={seq_id}"}
menuTemplate+=json:{"label": "Download ALL Data on Contig {seq_id}", "iconClass" : "dijitIconDatabase","action": "newWindow","url" : "http://dubcovskylab.ucdavis.edu/blast/getTillingData.php?contig={seq_id}"}
menuTemplate+=json:{"label": "Seed Order Form", "iconClass" : "dijitIconPackage","action": "newWindow","url" : "http://dubcovskylab.ucdavis.edu/wheat-tilling/order"}
key  = Lower-Confidence MultiMap Mutants


[ tracks.kronos0 ]
# settings for what data is shown in the track
storeClass     = JBrowse/Store/SeqFeature/VCFTabix
urlTemplate    = ../../vcf_files/genomeref/Kronos0_KTC1_KTC8_KTC25.rmdup.merged-freebayes.mincov6.minalt4-20140911.vep.vcf.gz
tbiUrlTemplate = ../../vcf_files/genomeref/Kronos0_KTC1_KTC8_KTC25.rmdup.merged-freebayes.mincov6.minalt4-20140911.vep.vcf.gz.tbi
category = Mutants / 4 Reference Mutants
maxHeight = 1000
type = JBrowse/View/Track/CanvasVariants
variantColorCoding = function( feature ) {
    /*console.log(feature); */
    var value = feature.get('CSQ');
    if(typeof value !== 'undefined') {
        var data = value.values;
        for(var i=0, len=data.length; i<len; i++) {
            counter = i+1;
            /* console.log(value[i]); */
            var dataSplit  = data[i].split("|");
            var gene_name = dataSplit[1];
            var eff_type = dataSplit[4];
            var aa_pos = dataSplit[7];
            var aa_change = dataSplit[8];
            var codondistance = dataSplit[9];
            if(eff_type === "stop_gained") {
                return '#FF0000';
            } else if (eff_type.match(/splice/)) {
                return '#FF0000';
            } else if (eff_type === "missense_variant") {
                return 'purple';
            } else if (eff_type === "synonymous_variant") {
                return '#00FF2F';
            }
        }
        return 'blue';
    } else {
        return 'blue';
    }
  }
style.text2Color = function( feature, variableName, glyphObject, track ) { return track.config.variantColorCoding(feature); }
fmtDetailField_alternative_alleles = function(fieldname) { return "Alternative alleles"; }
fmtDetailValue_CSQ = function(value) {
        newvalue = "";
        /* console.log(value); */
        if( value instanceof Array) {
            /* console.log(value[0]); */
            for(var i=0, len=value.length; i<len; i++) {
                counter = i+1;
                /* console.log(value[i]); */
                var dataSplit  = value[i].split("|");
                var gene_name = dataSplit[1];
                var eff_type = dataSplit[4];
                var aa_pos = dataSplit[7];
                var aa_change = dataSplit[8];
                var codondistance = dataSplit[9];
                /* console.log("String array: " + dataSplit); */
                newvalue += "<b>SnpEffect_" + counter + ":</b><br>Transcript = " + gene_name + "<br>Mutation Effect = " + eff_type;
                if(codondistance != "") {
                    newvalue += "<br>Codon change/distance = " + codondistance;
                }
                if(aa_change != "") {
                    if(aa_change.indexOf('/') === -1) {
                        aa_change = aa_change + aa_pos;
                    } else {
                        aa_change = aa_change.replace("/", aa_pos);
                    }
                    newvalue += "<br>Amino acid change = " + aa_change;
                }
                newvalue += "<br>";
            }
        }
        return newvalue;
    }
fmtDetailField_CSQ = function(fieldname) { return "VEP SNP Effect"; }
fmtDetailValue_seed_avail = function(value) {
        newvalue = "";
        if( value instanceof Array) {
            for(var i=0, len=value.length; i<len; i++) {
                counter = i+1;
                var sample_id = value[i];
                var fetchData = dojo.xhrGet({
                    url:"data/vcf_files/genomeref/seed_stock.json",
                    handleAs:"json",
                    sync:true,
                    load: function(data){
                        for(var j in data){
                            if(sample_id === data[j]["sample_id"]) {
                                newvalue = data[j]["avail"];
                                break;
                            }
                        }
                    }
                });
            }
        }
        return newvalue;
    }
fmtDetailField_seed_avail = function(fieldname) { return "Seed Stock Availability"; }
fmtDetailField_filter = function(fieldname) { return ""; }
fmtDetailValue_filter = function(value) { return ""; }
fmtDetailField_Score = function(fieldname) { return ""; }
fmtDetailValue_Score = function(value) { return ""; }
key  = Kronos0 SNPs compared to CS


[ tracks.multicontigs ]
# settings for what data is shown in the track
storeClass     = JBrowse/Store/SeqFeature/NCList
urlTemplate    = ../../raw/genomeref/tracks/Ambiguous Contigs/{refseq}/trackData.json
category = Mutants / 2 MultiMap
style.color = red
transcriptType = transcript
type = CanvasFeatures
key  = MultiMap Contigs Warning

